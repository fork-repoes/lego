# 数据源配置
# 总共4个数据源
spring.shardingsphere.datasource.names=data-ds0, data-ds1, box-ds0, box-ds1 

# data-ds0 数据源配置
spring.shardingsphere.datasource.data-ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.data-ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.data-ds0.jdbc-url=jdbc:mysql://127.0.0.1:3306/feed_data_0?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
spring.shardingsphere.datasource.data-ds0.username=root
spring.shardingsphere.datasource.data-ds0.password=root

# data-ds1 数据源配置
spring.shardingsphere.datasource.data-ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.data-ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.data-ds1.jdbc-url=jdbc:mysql://127.0.0.1:3306/feed_data_1?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
spring.shardingsphere.datasource.data-ds1.username=root
spring.shardingsphere.datasource.data-ds1.password=root

# box-ds0 数据源配置
spring.shardingsphere.datasource.box-ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.box-ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.box-ds0.jdbc-url=jdbc:mysql://127.0.0.1:3306/feed_box_0?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
spring.shardingsphere.datasource.box-ds0.username=root
spring.shardingsphere.datasource.box-ds0.password=root

# box-ds1 数据源配置
spring.shardingsphere.datasource.box-ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.box-ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.box-ds1.jdbc-url=jdbc:mysql://127.0.0.1:3306/feed_box_1?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
spring.shardingsphere.datasource.box-ds1.username=root
spring.shardingsphere.datasource.box-ds1.password=root

# 分库分表规则配置
# 使用雪花算法生成分布式主键id的值
spring.shardingsphere.sharding.default-key-generator.column=id
spring.shardingsphere.sharding.default-key-generator.column-type=BIGINT
spring.shardingsphere.sharding.default-key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.default-key-generator.algorithm-expression=SNOWFLAKE_HASH(id, 12)
spring.shardingsphere.sharding.default-key-generator.matrix-handling-type=SHARDING_DEFAULT

# 数据表配置
spring.shardingsphere.sharding.tables.feed.actual-data-nodes=data-ds0.feed_$->{0..7},data-ds1.feed_$->{8..15}
# user_id 为分表分片键
spring.shardingsphere.sharding.tables.feed.table-strategy.inline.sharding-column=owner_id
# 根据 user_id 以 16 取模，进行分表
spring.shardingsphere.sharding.tables.feed.table-strategy.inline.algorithm-expression=feed_$->{Math.abs(owner_id.hashCode())  % 16}
# user_id 为分库分片键
spring.shardingsphere.sharding.tables.feed.database-strategy.inline.sharding-column=owner_id
# 根据 user_id 以 16 取模后除8 ，进行分库
spring.shardingsphere.sharding.tables.feed.database-strategy.inline.algorithm-expression=data-ds$->{Math.floorDiv((Math.abs(owner_id.hashCode())  % 16) , 8)}


# Box表配置
spring.shardingsphere.sharding.tables.feed_box.actual-data-nodes=box-ds0.feed_box_$->{0..7},box-ds1.feed_box_$->{8..15}
spring.shardingsphere.sharding.tables.feed_box.table-strategy.inline.sharding-column=owner_id
spring.shardingsphere.sharding.tables.feed_box.table-strategy.inline.algorithm-expression=feed_box_$->{Math.abs(owner_id.hashCode())  % 16}
spring.shardingsphere.sharding.tables.feed_box.database-strategy.inline.sharding-column=owner_id
spring.shardingsphere.sharding.tables.feed_box.database-strategy.inline.algorithm-expression=box-ds$->{Math.floorDiv((Math.abs(owner_id.hashCode())  % 16) , 8)}


# 打印 SQL 配置（可选）
spring.shardingsphere.props.sql.show=true

